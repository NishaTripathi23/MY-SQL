create database operation
use operation

create table if not exists course(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30))

create table if not exists student_table(
student_id int,
student_name varchar (30),
student_mobile int,
student_course_enroll varchar (30),
student_course_id int)

insert into course values(101, 'fsda', 'full stack data analytics', 'analytics'),
(102, 'fsds', 'full stack data science', 'ds'),
(103, 'fsds', 'full stack data science', 'ds'),
(104, 'big data', 'full stack big data', 'BD'),
(105, 'big data', 'full stack big data', 'BD'),
(106, 'mern', 'full stack mern', 'mern'),
(107, 'blockchain', 'full stack blockchain', 'BC'),
(108, 'java', 'full stack java', 'java'),
(109, 'java', 'full stack java', 'java'),
(110, 'testing', 'full stack testing', 'testing'),
(111, 'testing', 'full stack testing', 'testing'),
(112, 'cyber security', 'full stack cyber security', 'CS'),
(113, 'c++', 'full stack c++', 'language'),
(114, 'c', 'full stack c', 'c')
insert into student_table values(301, 'varun', 1234, 'yes', 101),
(302, 'varun', 1234, 'yes', 102),
(303, 'varun', 1234, 'yes', 103),
(304, 'varun', 1234, 'yes', 104),
(305, 'varun', 1234, 'yes', 105),
(306, 'varun', 1234, 'yes', 106),
(307, 'varun', 1234, 'yes', 107),
(308, 'varun', 1234, 'yes', 108),
(309, 'varun', 1234, 'yes', 109),
(310, 'varun', 1234, 'yes', 110)
select * from course
select * from student_table
drop table student_table

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name from course c
inner join student_table s on c.course_id = s.student_course_id

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
inner join student_table s on c.course_id = s.student_course_id

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
left join student_table s on c.course_id = s.student_course_id

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
left join student_table s on c.course_id = s.student_course_id where s.student_id is null;

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
right join student_table s on c.course_id = s.student_course_id

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
right join student_table s on c.course_id = s.student_course_id where c.course_id is null;

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
cross join student_table s on c.course_id = s.student_course_id

select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
cross join student_table s 

show index from course1

create table if not exists course1(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
index(course_id))

insert into course1 values(101, 'fsda', 'full stack data analytics', 'analytics'),
(102, 'fsds', 'full stack data science', 'ds'),
(103, 'fsds', 'full stack data science', 'ds'),
(104, 'big data', 'full stack big data', 'BD'),
(105, 'big data', 'full stack big data', 'BD'),
(106, 'mern', 'full stack mern', 'mern'),
(107, 'blockchain', 'full stack blockchain', 'BC'),
(108, 'java', 'full stack java', 'java'),
(109, 'java', 'full stack java', 'java'),
(110, 'testing', 'full stack testing', 'testing'),
(111, 'testing', 'full stack testing', 'testing'),
(112, 'cyber security', 'full stack cyber security', 'CS'),
(113, 'c++', 'full stack c++', 'language'),
(114, 'c', 'full stack c', 'c')

create table if not exists course2(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
index(course_id, course_name))

show index from course4

create table if not exists course3(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
index(course_desc, course_name))

create table if not exists course4(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
index(course_id, course_name, course_tag))

insert into course4 values(101, 'fsda', 'full stack data analytics', 'analytics'),
(102, 'fsds', 'full stack data science', 'ds'),
(103, 'fsds', 'full stack data science', 'ds'),
(104, 'big data', 'full stack big data', 'BD'),
(105, 'big data', 'full stack big data', 'BD'),
(106, 'mern', 'full stack mern', 'mern'),
(107, 'blockchain', 'full stack blockchain', 'BC'),
(108, 'java', 'full stack java', 'java'),
(109, 'java', 'full stack java', 'java'),
(110, 'testing', 'full stack testing', 'testing'),
(111, 'testing', 'full stack testing', 'testing'),
(112, 'cyber security', 'full stack cyber security', 'CS'),
(113, 'c++', 'full stack c++', 'language'),
(114, 'c', 'full stack c', 'c')

select * from course4 where course_id = 106

explain select * from course4 where course_id = 106 or course_name = 'fsds'
explain select * from course4 where course_id = 106

analyze table course4

create table if not exists course5(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
unique index(course_desc))

show index from course5

create table if not exists course6(
course_id int,
course_name varchar (50),
course_desc varchar (60),
course_tag varchar (30),
unique index(course_desc, course_name))

show index from course6

select * from course
select * from student_table
select course_id, course_name from course
union
select student_id, student_name from student_table

select course_id, course_name from course
union all
select student_id, student_name from student_table

with sample_students as (
select * from course where course_id in (101, 102, 106))
select * from sample_students where course_tag = 'mern'

with outcome_cross as (select c.course_id, c.course_name, c.course_desc, s.student_id, s.student_name, s.student_course_id from course c
cross join student_table s) select course_id, course_name, student_id from outcome_cross where student_id = 301

select 1 as col1, 2 as col2
union all
select 3,4

with ctetest as (select 1 as col1, 2 as col2
union all
select 3,4)
select col1, col2 from ctetest

with recursive cte(n) as
(select 1 union all select n+1 from cte where n < 5)
select * from cte
