CREATE DATABASE NT_WINDOW_FUNCTION;
USE NT_WINDOW_FUNCTION;

CREATE TABLE NT_PRODUCTS2
( 
    product_category varchar(255),
    brand varchar(255),
    product_name varchar(255),
    price int
);

INSERT INTO NT_productS2 VALUES
('Phone', 'Apple', 'iPhone 12 Pro Max', 1300),
('Phone', 'Apple', 'iPhone 12 Pro', 1100),
('Phone', 'Apple', 'iPhone 12', 1000),
('Phone', 'Samsung', 'Galaxy Z Fold 3', 1800),
('Phone', 'Samsung', 'Galaxy Z Flip 3', 1000),
('Phone', 'Samsung', 'Galaxy Note 20', 1200),
('Phone', 'Samsung', 'Galaxy S21', 1000),
('Phone', 'OnePlus', 'OnePlus Nord', 300),
('Phone', 'OnePlus', 'OnePlus 9', 800),
('Phone', 'Google', 'Pixel 5', 600),
('Laptop', 'Apple', 'MacBook Pro 13', 2000),
('Laptop', 'Apple', 'MacBook Air', 1200),
('Laptop', 'Microsoft', 'Surface Laptop 4', 2100),
('Laptop', 'Dell', 'XPS 13', 2000),
('Laptop', 'Dell', 'XPS 15', 2300),
('Laptop', 'Dell', 'XPS 17', 2500),
('Earphone', 'Apple', 'AirPods Pro', 280),
('Earphone', 'Samsung', 'Galaxy Buds Pro', 220),
('Earphone', 'Samsung', 'Galaxy Buds Live', 170),
('Earphone', 'Sony', 'WF-1000XM4', 250),
('Headphone', 'Sony', 'WH-1000XM4', 400),
('Headphone', 'Apple', 'AirPods Max', 550),
('Headphone', 'Microsoft', 'Surface Headphones 2', 250),
('Smartwatch', 'Apple', 'Apple Watch Series 6', 1000),
('Smartwatch', 'Apple', 'Apple Watch SE', 400),
('Smartwatch', 'Samsung', 'Galaxy Watch 4', 600),
('Smartwatch', 'OnePlus', 'OnePlus Watch', 220);

SELECT * FROM NT_PRODUCTS2;
SELECT DISTINCT BRAND FROM NT_PRODUCTS2;
SELECT DISTINCT PRODUCT_CATEGORY FROM NT_PRODUCTS2;
SELECT DISTINCT PRODUCT_NAME FROM NT_PRODUCTS2;

-- -- FIRST_VALUE --
-- Write query to display the most expensive product under each category (corresponding to each record) --
SELECT *,
FIRST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC) AS EXPENSIVE_PRODUCT
FROM NT_PRODUCTS2;

-- Write query to display the most CHEAP product under each category (corresponding to each record) --
SELECT *,
LAST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC) AS CHEAP_PRODUCT
FROM NT_PRODUCTS2; -- THIS IS NOT GIVING THE DESIRED RESULT -- SO WE NEED TO USE FRAME CLAUSE --

-- FRAME IS A SUBSET OF PARTITION 
SELECT *,
          LAST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
           RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -- THIS IS THE DEFAULT FRAME -- THAT IS WHY WE ARE NOT GETTING THE DESIRED RESULT --
           AS CHEAP_PRODUCT
FROM NT_PRODUCTS2; 
-- FRAME CLAUSE BECOMES VERY IMPORTANT WHILE USING LAST_VALUE -- 

SELECT *,
          LAST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
           RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
           AS CHEAP_PRODUCT
FROM NT_PRODUCTS2; -- FOLLOWING MEANS ALL THE RECORDS FOLLOWING THE CURRENT ROW AND PRECEDING MEANS ALL THE RECORDS PRIOR TO THE CURRENT RECORD --
-- UNBOUNDED MEANS EITHER TO THE END OR TO THE BEGINNING --

SELECT *,
FIRST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC) AS EXPENSIVE_PRODUCT,
LAST_VALUE (PRODUCT_NAME) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
           RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
           AS CHEAP_PRODUCT
FROM NT_PRODUCTS2;

-- ALTERNATE WAY OF WRITING THE QUERY --
SELECT *,
FIRST_VALUE (PRODUCT_NAME) OVER W AS EXPENSIVE_PRODUCT,
LAST_VALUE (PRODUCT_NAME) OVER W AS CHEAP_PRODUCT
FROM NT_PRODUCTS2
WINDOW W AS (PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING);

-- NTH VALUE --
-- WRITE QUERY TO DISPLAY THE SECOND MOST EXPENSIVE PRODUCT UNDER EACH CATEGORY --
SELECT *,
NTH_VALUE(PRODUCT_NAME, 2) OVER(PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SECOND_MOST_EXPENSIVE_PRODUCT
FROM NT_PRODUCTS2;

SELECT *,
NTH_VALUE(PRODUCT_NAME, 2) OVER W AS SECOND_MOST_EXPENSIVE_PRODUCT
FROM NT_PRODUCTS2
WINDOW W AS (PARTITION BY PRODUCT_CATEGORY ORDER BY PRICE DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING);

-- NTILE
-- Write a query to segregate all the expensive phones, mid range phones and the cheaper phones --
select product_name, PRICE, X.BUCKET,
CASE WHEN X.BUCKET = 1 THEN 'EXPENSIVE_PHONES'
     WHEN X.BUCKET = 2 THEN 'MID_RANGE_PHONES'
     WHEN X.BUCKET = 3 THEN 'CHEAPER_PHONES'
     END AS PHONE_RANGE_CATEGORY
FROM (SELECT *,
NTILE(3) OVER (ORDER BY PRICE DESC) AS BUCKET
FROM NT_PRODUCTS2
WHERE PRODUCT_CATEGORY = 'Phone') as x